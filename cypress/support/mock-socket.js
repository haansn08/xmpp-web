import { Server } from 'mock-socket'

function getIqId (stanza) {
  const result = /<iq.* id="(\S+)" .*<\/iq>/.exec(stanza)
  return result[1]
}

export function MockServer({ url, jidLocal, jidDomain } ) {
  const mockServer = new Server(url)
  mockServer.on('connection', socket => {
    let isAuth = false
    let resource
    socket.on('message', data => {
      if (data.startsWith('<open') && !isAuth) {
        isAuth = true
        socket.send(`<open xmlns='urn:ietf:params:xml:ns:xmpp-framing' xml:lang='en' version='1.0' from='${jidDomain}' id='3e25e594-4c00-4000-8de4-0c913bdfb4c5'/>`)
        socket.send("<stream:features xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams'><mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'><mechanism>SCRAM-SHA-1</mechanism><mechanism>PLAIN</mechanism></mechanisms></stream:features>")
        return
      }
      if (data.startsWith('<auth ')) {
        socket.send("<success xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>")
        return
      }
      if (data.startsWith('<open') && isAuth) {
        socket.send(`<open xmlns='urn:ietf:params:xml:ns:xmpp-framing' xml:lang='en' version='1.0' from='${jidDomain}' id='0106fb07-dd38-4000-89a1-fb0de64eb316'/>`)
        socket.send("<stream:features xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams'><c xmlns='http://jabber.org/protocol/caps' hash='sha-1' ver='LWq8k8Q151aCGzsLdpH3MEiq5eU=' node='http://prosody.im'/><ver xmlns='urn:xmpp:features:rosterver'/><bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'><required/></bind><session xmlns='urn:ietf:params:xml:ns:xmpp-session'><optional/></session></stream:features>")
        return
      }
      if (data.endsWith('</resource></bind></iq>')) {
        const result = /<iq type="set" id="(.+)" xmlns="jabber:client"><bind xmlns="urn:ietf:params:xml:ns:xmpp-bind"><resource>(.+)<\/resource><\/bind><\/iq>/.exec(data)
        resource = result[2]
        socket.send(`<iq type='result' id='${result[1]}' xmlns='jabber:client'><bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'><jid>${jidLocal}@${jidDomain}/${resource}</jid></bind></iq>`)
        return
      }
      if (data.endsWith('<query xmlns="jabber:iq:roster"/></iq>')) {
        socket.send(`<iq to='${jidLocal}@${jidDomain}/${resource}' id='${getIqId(data)}' xmlns='jabber:client' type='result'><query xmlns='jabber:iq:roster'><item name='' subscription='both' jid='user2@${jidDomain}'><group>Dev Team</group></item></query></iq>`)
        return
      }
      if (data.endsWith('<query xmlns="http://jabber.org/protocol/disco#info"/></iq>')) {
        const result = /<iq type="get" from=".+" to="(\S+)" id="(\S+)" xmlns="jabber:client"><query xmlns="http:\/\/jabber.org\/protocol\/disco#info"\/><\/iq>/.exec(data)
        switch (result[1]) {
          case jidDomain:
            socket.send(`<iq type='result' id='${result[2]}' to='${jidLocal}@${jidDomain}/${resource}' from='@${jidDomain}' xmlns='jabber:client'><query xmlns='http://jabber.org/protocol/disco#info'><identity name='XMPP server' type='file' category='store'/><identity name='XMPP server' type='im' category='server'/><identity name='XMPP server' type='pep' category='pubsub'/><identity name='XMPP server' type='bytestreams' category='proxy'/><feature var='msgoffline'/><feature var='urn:xmpp:blocking'/><feature var='urn:xmpp:time'/><feature var='jabber:iq:time'/><feature var='jabber:iq:last'/><feature var='vcard-temp'/><feature var='jabber:iq:roster'/><feature var='urn:xmpp:http:upload:0'/><feature var='urn:xmpp:http:upload'/><feature var='urn:xmpp:carbons:2'/><feature var='http://jabber.org/protocol/disco#info'/><feature var='http://jabber.org/protocol/disco#items'/><feature var='urn:xmpp:ping'/><feature var='jabber:iq:version'/><feature var='http://jabber.org/protocol/commands'/><feature var='http://jabber.org/protocol/pubsub#publish'/><feature var='jabber:iq:private'/><feature var='http://jabber.org/protocol/bytestreams'/><feature var='jabber:iq:register'/><x xmlns='jabber:x:data' type='result'><field type='hidden' var='FORM_TYPE'><value>urn:xmpp:http:upload:0</value></field><field type='text-single' var='max-file-size'><value>10485760</value></field></x><x xmlns='jabber:x:data' type='result'><field type='hidden' var='FORM_TYPE'><value>urn:xmpp:http:upload</value></field><field type='text-single' var='max-file-size'><value>10485760</value></field></x></query></iq>`)
            break
          case `welcome@conference.${jidDomain}`:
            socket.send(`<iq type='result' id='${result[2]}' to='${jidLocal}@${jidDomain}/${resource}' from='welcome@conference.${jidDomain}' xmlns='jabber:client'><query xmlns='http://jabber.org/protocol/disco#info'><feature var='vcard-temp'/><feature var='muc_open'/><feature var='http://jabber.org/protocol/muc#request'/><feature var='muc_semianonymous'/><feature var='muc_public'/><feature var='muc_unsecured'/><identity name='welcome' type='text' category='conference'/><feature var='muc_unmoderated'/><feature var='urn:xmpp:mam:2'/><feature var='urn:xmpp:sid:0'/><feature var='muc_persistent'/><feature var='jabber:iq:register'/><feature var='http://jabber.org/protocol/muc'/><feature var='http://jabber.org/protocol/muc#stable_id'/><feature var='http://jabber.org/protocol/muc#self-ping-optimization'/><x xmlns='jabber:x:data' type='result'><field type='hidden' var='FORM_TYPE'><value>http://jabber.org/protocol/muc#roominfo</value></field><field type='text-single' var='{http://modules.prosody.im/mod_vcard_muc}avatar#sha1'/><field type='boolean' var='{http://prosody.im/protocol/muc}roomconfig_allowmemberinvites' label='Allow members to invite new members'><value>0</value></field><field type='boolean' var='muc#roomconfig_allowinvites' label='Allow users to invite other users'><value>1</value></field><field type='text-single' var='muc#roominfo_occupants' label='Number of occupants'><value>1</value></field><field type='text-single' var='muc#roomconfig_roomname' label='Title'><value>welcome</value></field><field type='boolean' var='muc#roomconfig_changesubject'/><field type='text-single' var='muc#roominfo_description' label='Description'><value>Private welcome</value></field><field type='text-single' var='muc#roominfo_lang'><value>en</value></field></x></query></iq>`)
            break
          case `public@anon-conference.${jidDomain}`:
            socket.send(`<iq type='result' id='${result[2]}' to='${jidLocal}@${jidDomain}/${resource}' from='public@anon-conference.${jidDomain}' xmlns='jabber:client'><query xmlns='http://jabber.org/protocol/disco#info'><feature var='muc_nonanonymous'/><identity name='public' type='text' category='conference'/><feature var='jabber:iq:register'/><feature var='muc_unsecured'/><feature var='muc_unmoderated'/><feature var='muc_public'/><feature var='http://jabber.org/protocol/muc#request'/><feature var='vcard-temp'/><feature var='http://jabber.org/protocol/muc'/><feature var='http://jabber.org/protocol/muc#stable_id'/><feature var='http://jabber.org/protocol/muc#self-ping-optimization'/><feature var='urn:xmpp:mam:2'/><feature var='urn:xmpp:sid:0'/><feature var='muc_persistent'/><feature var='muc_open'/><x xmlns='jabber:x:data' type='result'><field type='hidden' var='FORM_TYPE'><value>http://jabber.org/protocol/muc#roominfo</value></field><field type='text-single' var='muc#roominfo_description' label='Description'><value>Public with anon</value></field><field type='text-single' var='muc#roomconfig_roomname' label='Title'><value>public</value></field><field type='text-single' var='muc#roominfo_lang'><value/></field><field type='boolean' var='muc#roomconfig_changesubject'/><field type='text-single' var='{http://modules.prosody.im/mod_vcard_muc}avatar#sha1'/><field type='boolean' var='{http://prosody.im/protocol/muc}roomconfig_allowmemberinvites' label='Allow members to invite new members'><value>0</value></field><field type='boolean' var='muc#roomconfig_allowinvites' label='Allow users to invite other users'><value>1</value></field><field type='text-single' var='muc#roominfo_occupants' label='Number of occupants'><value>1</value></field></x></query></iq>`)
            break
          default:
            console.error('unknown message:', data)
        }
        return
      }
      if (data.endsWith('<enable xmlns="urn:xmpp:carbons:2"/></iq>')) {
        socket.send(`<iq to='${jidLocal}@${jidDomain}/${resource}' id='${getIqId(data)}' xmlns='jabber:client' type='result'/>`)
        return
      }
      if (data.endsWith('<storage xmlns="storage:bookmarks"/></query></iq>')) {
        socket.send(`<iq to='${jidLocal}@${jidDomain}/${resource}' id='${getIqId(data)}' xmlns='jabber:client' type='result'><query xmlns='jabber:iq:private'><storage xmlns='storage:bookmarks'><conference jid='welcome@conference.${jidDomain}' name='welcome' autojoin='true'><nick>${jidLocal}</nick></conference><conference jid='public@anon-conference.${jidDomain}' name='public' autojoin='true'><nick>${jidLocal}</nick></conference></storage></query></iq>`)
        return
      }
      if (data.endsWith('<vCard xmlns="vcard-temp"/></iq>')) {
        const result = /<iq type="get" from=".+" to="(\S+)" id="(\S+)" xmlns="jabber:client"><vCard xmlns="vcard-temp"\/><\/iq>/.exec(data)
        switch (result[1]) {
          case `${jidLocal}@${jidDomain}`:
            socket.send(`<iq type='result' id='${getIqId(data)}' to='${jidLocal}@${jidDomain}/${resource}' from='${result[1]}' xmlns='jabber:client'><vCard xmlns='vcard-temp'><FN>fn</FN><N><FAMILY/><GIVEN/><MIDDLE/><PREFIX/><SUFFIX/></N><NICKNAME>user ${jidLocal}</NICKNAME><URL/><BDAY/><ROLE/><TITLE/><PHOTO><TYPE>image/jpeg</TYPE><BINVAL></BINVAL></PHOTO></vCard></iq>`)
            break
          case `user2@${jidDomain}`:
            socket.send(`<iq type='result' id='${getIqId(data)}' to='${jidLocal}@${jidDomain}/${resource}' from='${result[1]}' xmlns='jabber:client'><vCard xmlns='vcard-temp'><FN>fn</FN><N><FAMILY/><GIVEN/><MIDDLE/><PREFIX/><SUFFIX/></N><NICKNAME>user two</NICKNAME><URL/><BDAY/><ROLE/><TITLE/><PHOTO><TYPE>image/jpeg</TYPE><BINVAL>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</BINVAL></PHOTO></vCard></iq>`)
            break
          case `welcome@conference.${jidDomain}`:
          case `public@anon-conference.${jidDomain}`:
          default:
            socket.send(`<iq type='error' id='${result[2]}' to='${jidLocal}@${jidDomain}/${resource}' from='${result[1]}' xmlns='jabber:client'><error type='cancel'><item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/></error></iq>`)
            break
        }
        return
      }
      if (data === '<presence xmlns="jabber:client"><show/></presence>') {
        socket.send(`<presence from='${jidLocal}@${jidDomain}/${resource}' xmlns='jabber:client'><show/><x xmlns='vcard-temp:x:update'><photo>5ac6c95fb8a84b58cf43945882d5b993b7b404cd</photo></x></presence>`)
        return
      }
      if (data.endsWith('<x xmlns="http://jabber.org/protocol/muc"/></presence>')) {
        const result = /<presence to="(.+)" .*<\/presence>/.exec(data)
        socket.send(`<presence to='${jidLocal}@${jidDomain}/${resource}' from='${result[1]}' xmlns='jabber:client'><x xmlns='vcard-temp:x:update'><photo>5ac6c95fb8a84b58cf43945882d5b993b7b404cd</photo></x><x xmlns='http://jabber.org/protocol/muc#user'><item jid='${jidLocal}@${jidDomain}/${resource}' affiliation='owner' role='moderator'/><status code='110'/></x></presence>`)
        return
      }
      if (/<iq type="set" .*<query xmlns="urn:xmpp:mam:2"><x xmlns="jabber:x:data" type="submit"><field var="FORM_TYPE" type="hidden"><value>urn:xmpp:mam:2<\/value><\/field><field var="with"><value>(.*)<\/value><\/field><\/x>.*<\/set><\/query><\/iq>/.test(data)) {
        socket.send(`<message to='${jidLocal}@${jidDomain}/${resource}' xmlns='jabber:client'><result xmlns='urn:xmpp:mam:2' id='I1jO-udTYjV3Znis'><forwarded xmlns='urn:xmpp:forward:0'><delay xmlns='urn:xmpp:delay' stamp='2023-09-09T21:30:42Z'/><message type='chat' id='x_Of6QGWgTfLzhpeERYjB' to='user2@${jidDomain}' from='${jidLocal}@${jidDomain}/${resource}' xmlns='jabber:client'><body>Previous message</body><origin-id xmlns='urn:xmpp:sid:0' id='x_Of6QGWgTfLzhpeERYjB'/></message></forwarded></result></message>`)
        socket.send(`<iq to='${jidLocal}@${jidDomain}/${resource}' id='${getIqId(data)}' xmlns='jabber:client' type='result'><fin xmlns='urn:xmpp:mam:2' complete='true'><set xmlns='http://jabber.org/protocol/rsm'><count>1</count><first>I1jO-udTYjV3Znis</first><last>I1jO-udTYjV3Znis</last></set></fin></iq>`)
        return
      }
      console.warn('unhandled request', data)
    })
  })
  return mockServer
}